From bd7c196e51e2ea4db40e0bce8855e4c52ba39a3c Mon Sep 17 00:00:00 2001
From: averne <averne381@gmail.com>
Date: Sun, 22 Aug 2021 21:49:16 +0200
Subject: [PATCH] Implement switch specific audio backend

---
 audio/out/ao.c          |   4 +
 audio/out/ao_hos.c      | 296 ++++++++++++++++++++++++++++++++++++++++
 meson.build             |  21 ++-
 meson_options.txt       |   1 +
 osdep/io.c              |   2 +-
 osdep/io.h              |   2 +-
 osdep/switch/sys/mman.h |  15 ++
 sub/filter_regex.c      |   2 +-
 sub/osd.c               |   4 +-
 sub/sd_ass.c            |  29 ++++
 video/mp_image.c        |   2 +-
 video/mp_image.h        |   2 +-
 wscript                 |   9 ++
 wscript_build.py        |   4 +-
 14 files changed, 382 insertions(+), 11 deletions(-)
 create mode 100644 audio/out/ao_hos.c
 create mode 100644 osdep/switch/sys/mman.h

diff --git a/audio/out/ao.c b/audio/out/ao.c
index a5aa3a9402..6dd0ba6eb2 100644
--- a/audio/out/ao.c
+++ b/audio/out/ao.c
@@ -53,6 +53,7 @@ extern const struct ao_driver audio_out_wasapi;
 extern const struct ao_driver audio_out_pcm;
 extern const struct ao_driver audio_out_lavc;
 extern const struct ao_driver audio_out_sdl;
+extern const struct ao_driver audio_out_hos;
 
 static const struct ao_driver * const audio_out_drivers[] = {
 // native:
@@ -95,6 +96,9 @@ static const struct ao_driver * const audio_out_drivers[] = {
 #endif
 #if HAVE_SNDIO
     &audio_out_sndio,
+#endif
+#if HAVE_HOS_AUDIO
+    &audio_out_hos,
 #endif
     &audio_out_null,
 #if HAVE_COREAUDIO
diff --git a/audio/out/ao_hos.c b/audio/out/ao_hos.c
new file mode 100644
index 0000000000..42b22ab9ed
--- /dev/null
+++ b/audio/out/ao_hos.c
@@ -0,0 +1,296 @@
+/*
+ * audio output driver for Horizon OS using audren
+ * Copyright (c) 2023 averne <averne381@gmail.com>
+ *
+ * This file is part of mpv.
+ *
+ * mpv is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * mpv is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with mpv.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <switch.h>
+
+#include "config.h"
+#include "common/common.h"
+#include "common/msg.h"
+#include "options/m_option.h"
+#include "audio/format.h"
+#include "ao.h"
+#include "internal.h"
+
+#define MAX_CHANS 6 // 5.1
+#define MAX_BUF 16
+#define MAX_SAMPLES 32768
+
+struct priv {
+    AudioDriver driver;
+    int num_buffers;
+    int num_samples;
+
+    void *pool;
+    AudioDriverWaveBuf *buffers;
+
+    int cur_buf_idx;
+    uint32_t cur_queued_samples, total_queued_samples;
+};
+
+static const AudioRendererConfig ar_config = {
+    .output_rate     = AudioRendererOutputRate_48kHz,
+    .num_voices      = MAX_CHANS,
+    .num_effects     = 0,
+    .num_sinks       = 1,
+    .num_mix_objs    = 1,
+    .num_mix_buffers = MAX_CHANS,
+};
+
+static const uint8_t sink_channel_ids[] = { 0, 1, 2, 3, 4, 5 };
+
+static const struct mp_chmap possible_channel_layouts[] = {
+    {0},
+    MP_CHMAP_INIT_MONO,                 // mono
+    MP_CHMAP_INIT_STEREO,               // stereo
+    MP_CHMAP3(FL, FR, LFE),             // 2.1
+    MP_CHMAP4(FL, FR, BL, BR),          // 4.0
+    MP_CHMAP5(FL, FR, FC, BL, BR),      // 5.0
+    MP_CHMAP6(FL, FR, FC, LFE, BL, BR), // 5.1
+};
+
+static int init(struct ao *ao) {
+    struct priv *priv = ao->priv;
+
+    Result rc;
+
+    MP_VERBOSE(ao, "Initializing hos audio\n");
+
+    ao->format   = AF_FORMAT_S16; // Only format supported by audrv with Adpcm which mpv can't output
+    ao->channels = possible_channel_layouts[MPMIN(ao->channels.num, MAX_CHANS)];
+
+    rc = audrenInitialize(&ar_config);
+    if (R_FAILED(rc))
+        return -rc;
+
+    rc = audrvCreate(&priv->driver, &ar_config, MAX_CHANS);
+    if (R_FAILED(rc))
+        return -rc;
+
+    size_t mempool_size = MP_ALIGN_UP(priv->num_samples * ao->channels.num *
+        priv->num_buffers * sizeof(int16_t), AUDREN_MEMPOOL_ALIGNMENT);
+
+    priv->pool = aligned_alloc(AUDREN_MEMPOOL_ALIGNMENT, mempool_size);
+    if (!priv->pool)
+        return -1;
+
+    priv->buffers = talloc_array(priv, AudioDriverWaveBuf, priv->num_buffers);
+    for (int i = 0; i < priv->num_buffers; ++i) {
+        priv->buffers[i] = (AudioDriverWaveBuf){
+            .data_raw            = priv->pool,
+            .size                = mempool_size,
+            .start_sample_offset = priv->num_samples * i,
+            .end_sample_offset   = priv->num_samples * (i + 1),
+        };
+    }
+
+    int mpid = audrvMemPoolAdd(&priv->driver, priv->pool, mempool_size);
+    audrvMemPoolAttach(&priv->driver, mpid);
+
+    ao->device_buffer = priv->num_buffers * priv->num_samples;
+
+    audrvDeviceSinkAdd(&priv->driver, AUDREN_DEFAULT_DEVICE_NAME, MAX_CHANS, sink_channel_ids);
+
+    rc = audrenStartAudioRenderer();
+    if (R_FAILED(rc))
+        return -rc;
+
+    audrvVoiceInit(&priv->driver, 0, ao->channels.num, PcmFormat_Int16, ao->samplerate);
+    audrvVoiceSetDestinationMix(&priv->driver, 0, AUDREN_FINAL_MIX_ID);
+
+    for (int i = 0; i < ao->channels.num; ++i)
+        audrvVoiceSetMixFactor(&priv->driver, 0, 1.0f, ao->channels.speaker[i], ao->channels.speaker[i]);
+
+    return 0;
+}
+
+static void uninit(struct ao *ao) {
+    struct priv *priv = ao->priv;
+
+    MP_VERBOSE(ao, "Deinitializing hos audio\n");
+
+    audrvVoiceStop(&priv->driver, 0);
+    audrvUpdate(&priv->driver);
+
+    audrvClose(&priv->driver);
+    audrenExit();
+
+    free(priv->pool);
+}
+
+static void reset(struct ao *ao) {
+    struct priv *priv = ao->priv;
+
+    priv->cur_buf_idx = -1;
+    priv->cur_queued_samples = priv->total_queued_samples = 0;
+    audrvVoiceStop(&priv->driver, 0);
+    audrvUpdate(&priv->driver);
+}
+
+static bool set_pause(struct ao *ao, bool paused) {
+    struct priv *priv = ao->priv;
+
+    audrvVoiceSetPaused(&priv->driver, 0, paused);
+    return R_SUCCEEDED(audrvUpdate(&priv->driver));
+}
+
+static void start(struct ao *ao) {
+    struct priv *priv = ao->priv;
+
+    audrvVoiceStart(&priv->driver, 0);
+    audrvUpdate(&priv->driver);
+}
+
+static int find_free_wavebuf(struct priv *priv) {
+    for (int i = 0; i < priv->num_buffers; ++i) {
+        AudioDriverWaveBuf *buf = &priv->buffers[i];
+        if (buf->state == AudioDriverWaveBufState_Done ||
+                buf->state == AudioDriverWaveBufState_Free)
+            return i;
+    }
+    return -1;
+}
+
+static bool audio_write(struct ao *ao, void **data, int samples) {
+    struct priv *priv = ao->priv;
+
+    // We requested a linear format so there is only one buffer
+    uint8_t *dat = data[0];
+
+    while (samples) {
+        int idx = (priv->cur_buf_idx != -1) ? priv->cur_buf_idx : find_free_wavebuf(priv);
+        if (idx == -1)
+            return false;
+        priv->cur_buf_idx = idx;
+
+        AudioDriverWaveBuf *buf = &priv->buffers[idx];
+        uint8_t *buf_offset = (uint8_t *)buf->data_raw + (idx * priv->num_samples * ao->sstride);
+
+        size_t num_samples = MPMIN(samples, priv->num_samples - priv->cur_queued_samples);
+
+        memcpy(buf_offset + priv->cur_queued_samples * ao->sstride, dat, num_samples * ao->sstride);
+        priv->cur_queued_samples   += num_samples;
+        priv->total_queued_samples += num_samples;
+
+        dat     += num_samples * ao->sstride;
+        samples -= num_samples;
+
+        // Append buffer once it's full
+        if (priv->cur_queued_samples >= priv->num_samples) {
+            armDCacheFlush(buf_offset, priv->num_samples * ao->sstride);
+            audrvVoiceAddWaveBuf(&priv->driver, 0, buf);
+            audrvUpdate(&priv->driver);
+
+            priv->cur_buf_idx = -1, priv->cur_queued_samples = 0;
+        }
+    }
+
+    return true;
+}
+
+static void get_state(struct ao *ao, struct mp_pcm_state *state) {
+    struct priv *priv = ao->priv;
+
+    Result rc = audrvUpdate(&priv->driver);
+    if (R_FAILED(rc))
+        return;
+
+    state->free_samples = state->queued_samples = 0;
+    for (int i = 0; i < priv->num_buffers; ++i) {
+        AudioDriverWaveBuf *buf = &priv->buffers[i];
+        if (buf->state == AudioDriverWaveBufState_Free
+                || buf->state == AudioDriverWaveBufState_Done)
+            state->free_samples += priv->num_samples;
+    }
+
+    if (priv->cur_buf_idx != -1)
+        state->free_samples -= priv->num_samples - priv->cur_queued_samples;
+
+    state->queued_samples = priv->total_queued_samples -
+        audrvVoiceGetPlayedSampleCount(&priv->driver, 0);
+    state->delay = (double)state->queued_samples / ao->samplerate;
+    state->playing = audrvVoiceIsPlaying(&priv->driver, 0);
+}
+
+static int control(struct ao *ao, enum aocontrol cmd, void *arg) {
+    struct priv *priv = ao->priv;
+
+    int rc;
+
+    switch (cmd) {
+        case AOCONTROL_SET_MUTE:
+        case AOCONTROL_SET_VOLUME: {
+                float vol;
+                if (cmd == AOCONTROL_SET_MUTE) {
+                    bool in = *(bool *)arg;
+                    vol = !in;
+                } else {
+                    float *in = arg;
+                    vol = *in / 100.0f;
+                }
+
+                audrvMixSetVolume(&priv->driver, 0, vol);
+                rc = audrvUpdate(&priv->driver);
+            }
+            break;
+        case AOCONTROL_GET_MUTE:
+        case AOCONTROL_GET_VOLUME: {
+                rc = audrvUpdate(&priv->driver);
+                float vol = priv->driver.in_mixes[0].volume;
+                if (cmd == AOCONTROL_GET_MUTE) {
+                    bool *out = (bool *)arg;
+                    *out = !vol;
+                } else {
+                    float *out = arg;
+                    *out = vol * 100.0f;
+                }
+            }
+            break;
+        default:
+            return CONTROL_UNKNOWN;
+    }
+
+    return R_SUCCEEDED(rc) ? CONTROL_OK : CONTROL_ERROR;
+}
+
+#define OPT_BASE_STRUCT struct priv
+
+const struct ao_driver audio_out_hos = {
+    .description     = "HOS Audio",
+    .name            = "hos",
+    .init            = init,
+    .uninit          = uninit,
+    .reset           = reset,
+    .control         = control,
+    .set_pause       = set_pause,
+    .start           = start,
+    .write           = audio_write,
+    .get_state       = get_state,
+    .priv_size       = sizeof(struct priv),
+    .priv_defaults   = &(const struct priv){
+        .num_buffers = 4,
+        .num_samples = 8192,
+    },
+    .options         = (const struct m_option[]){
+        {"num-buffers", OPT_INT(num_buffers), M_RANGE(2,   MAX_BUF)},
+        {"num-samples", OPT_INT(num_samples), M_RANGE(256, MAX_SAMPLES)},
+        {0}
+    },
+    .options_prefix   = "ao-hos",
+};
diff --git a/meson.build b/meson.build
index f9fe4e7263..c3d695c32a 100644
--- a/meson.build
+++ b/meson.build
@@ -294,7 +294,8 @@ endif
 
 darwin = host_machine.system() == 'darwin'
 win32 = host_machine.system() == 'cygwin' or host_machine.system() == 'windows'
-posix = not win32
+hos = host_machine.system() == 'horizon'
+posix = not (win32 or hos)
 
 features += {'darwin': darwin}
 features += {'posix': posix}
@@ -419,6 +420,18 @@ if darwin
 
 endif
 
+if hos
+    sources += files('osdep/path-unix.c',
+                     'osdep/timer-linux.c',
+                     'osdep/subprocess-dummy.c',
+                     'osdep/terminal-dummy.c',
+                     'osdep/main-fn-unix.c',
+                     'osdep/language-posix.c',
+                     'input/ipc-dummy.c',
+                     'osdep/polldev.c',
+                     'sub/filter_regex.c')
+endif
+
 if posix and not darwin
     sources += files('osdep/path-unix.c',
                      'osdep/timer-linux.c')
@@ -870,6 +883,12 @@ if features['wasapi']
                      'audio/out/ao_wasapi_utils.c')
 endif
 
+hos_audio = cc.has_header_symbol('switch.h', 'AudioDriver', required: get_option('hos-audio'))
+features += {'hos-audio': hos_audio}
+if features['hos-audio']
+    sources += files('audio/out/ao_hos.c')
+endif
+
 
 # video output dependencies
 caca_opt = get_option('caca').require(
diff --git a/meson_options.txt b/meson_options.txt
index 5f2d31df3d..d56868ae8e 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -52,6 +52,7 @@ option('pulse', type: 'feature', value: 'auto', description: 'PulseAudio audio o
 option('sdl2-audio', type: 'feature', value: 'auto', description: 'SDL2 audio output')
 option('sndio', type: 'feature', value: 'auto', description: 'sndio audio output')
 option('wasapi', type: 'feature', value: 'auto', description: 'WASAPI audio output')
+option('hos-audio', type: 'feature', value: 'auto', description: 'Audren audio output')
 
 # video output features
 option('caca', type: 'feature', value: 'auto', description: 'CACA')
diff --git a/osdep/io.c b/osdep/io.c
index 8cd6dede85..1304c8f12f 100644
--- a/osdep/io.c
+++ b/osdep/io.c
@@ -62,7 +62,7 @@ bool mp_set_cloexec(int fd)
     return true;
 }
 
-#ifdef __MINGW32__
+#if defined(__MINGW32__) || defined(__SWITCH__)
 int mp_make_cloexec_pipe(int pipes[2])
 {
     pipes[0] = pipes[1] = -1;
diff --git a/osdep/io.h b/osdep/io.h
index 905558c284..f616f58575 100644
--- a/osdep/io.h
+++ b/osdep/io.h
@@ -210,7 +210,7 @@ void freelocale(locale_t);
 
 #else /* __MINGW32__ */
 
-#include <sys/mman.h>
+#include "switch/sys/mman.h"
 
 extern char **environ;
 
diff --git a/osdep/switch/sys/mman.h b/osdep/switch/sys/mman.h
new file mode 100644
index 0000000000..398ff01729
--- /dev/null
+++ b/osdep/switch/sys/mman.h
@@ -0,0 +1,15 @@
+#ifndef _MEMMAP_H_
+#define _MEMMAP_H_
+
+#include <stdio.h>
+#include <stdint.h>
+
+#define PROT_READ       0x1
+#define PROT_WRITE      0x2
+#define MAP_SHARED      0x01
+#define MAP_FAILED      ((void *) -1)
+
+#define mmap(a, b, c, d, e, f) malloc(b)
+#define munmap(a, b) free(a)
+
+#endif
diff --git a/sub/filter_regex.c b/sub/filter_regex.c
index 8e299918ce..c7b08f5273 100644
--- a/sub/filter_regex.c
+++ b/sub/filter_regex.c
@@ -1,5 +1,5 @@
-#include <regex.h>
 #include <sys/types.h>
+#include <regex.h>
 
 #include "common/common.h"
 #include "common/msg.h"
diff --git a/sub/osd.c b/sub/osd.c
index 811b6c821b..1db7db8444 100644
--- a/sub/osd.c
+++ b/sub/osd.c
@@ -76,7 +76,7 @@ const struct m_sub_options osd_style_conf = {
     .opts = style_opts,
     .size = sizeof(struct osd_style_opts),
     .defaults = &(const struct osd_style_opts){
-        .font = "sans-serif",
+        .font = "nintendo_udsg-r_std_003",
         .font_size = 55,
         .color = {255, 255, 255, 255},
         .border_color = {0, 0, 0, 255},
@@ -95,7 +95,7 @@ const struct m_sub_options sub_style_conf = {
     .opts = style_opts,
     .size = sizeof(struct osd_style_opts),
     .defaults = &(const struct osd_style_opts){
-        .font = "sans-serif",
+        .font = "nintendo_udsg-r_std_003",
         .font_size = 55,
         .color = {255, 255, 255, 255},
         .border_color = {0, 0, 0, 255},
diff --git a/sub/sd_ass.c b/sub/sd_ass.c
index e4e5652875..978d8703f9 100644
--- a/sub/sd_ass.c
+++ b/sub/sd_ass.c
@@ -21,6 +21,10 @@
 #include <math.h>
 #include <limits.h>
 
+#ifdef __SWITCH__
+#include <switch.h>
+#endif
+
 #include <libavutil/common.h>
 #include <ass/ass.h>
 
@@ -198,6 +202,31 @@ static void enable_output(struct sd *sd, bool enable)
     } else {
         ctx->ass_renderer = ass_renderer_init(ctx->ass_library);
 
+#ifdef __SWITCH__
+        static char * const pl_font_names[] = {
+            [PlSharedFontType_Standard]             = "nintendo_udsg-r_std_003",
+            [PlSharedFontType_ChineseSimplified]    = "nintendo_udsg-r_org_zh-cn_003",
+            [PlSharedFontType_ExtChineseSimplified] = "nintendo_udsg-r_ext_zh-cn_003",
+            [PlSharedFontType_ChineseTraditional]   = "nintendo_udjxh-db_zh-tw_003",
+            [PlSharedFontType_KO]                   = "nintendo_udsg-r_ko_003",
+            [PlSharedFontType_NintendoExt]          = "NintendoExt003",
+        };
+
+        Result rc = plInitialize(PlServiceType_User);
+        if (R_SUCCEEDED(rc)) {
+            PlFontData font;
+            for (int i = 0; i < PlSharedFontType_Total; ++i) {
+                rc = plGetSharedFontByType(&font, i);
+                if (R_SUCCEEDED(rc))
+                    ass_add_font(ctx->ass_library, pl_font_names[font.type],
+                        font.address, font.size);
+                else
+                    MP_ERR(sd, "Failed to add font %s from pl: %#x\n", pl_font_names[i], rc);
+            }
+            plExit();
+        }
+#endif
+
         mp_ass_configure_fonts(ctx->ass_renderer, sd->opts->sub_style,
                                sd->global, sd->log);
     }
diff --git a/video/mp_image.c b/video/mp_image.c
index 40678d10bd..0baddd3e78 100644
--- a/video/mp_image.c
+++ b/video/mp_image.c
@@ -176,7 +176,7 @@ static bool mp_image_alloc_planes(struct mp_image *mpi)
         return false;
 
     // Note: mp_image_pool assumes this creates only 1 AVBufferRef.
-    mpi->bufs[0] = av_buffer_alloc(size + align);
+    mpi->bufs[0] = av_buffer_aligned_alloc(size + align, 0x100); // Alignment required for plane offsets
     if (!mpi->bufs[0])
         return false;
 
diff --git a/video/mp_image.h b/video/mp_image.h
index 98dd666412..376e269356 100644
--- a/video/mp_image.h
+++ b/video/mp_image.h
@@ -32,7 +32,7 @@
 // libraries except libavcodec don't really know what alignment they want.
 // Things will randomly crash or get slower if the alignment is not satisfied.
 // Whatever. This value should be pretty safe with current CPU architectures.
-#define MP_IMAGE_BYTE_ALIGN 64
+#define MP_IMAGE_BYTE_ALIGN 256 // VIC alignement
 
 #define MP_IMGFIELD_TOP_FIRST 0x02
 #define MP_IMGFIELD_REPEAT_FIRST 0x04
diff --git a/wscript b/wscript
index 82f65b4afa..42a574c09c 100644
--- a/wscript
+++ b/wscript
@@ -423,6 +423,10 @@ iconv support use --disable-iconv.",
         'name': 'zimg-st428',
         'desc': 'ZIMG support for ZIMG_TRANSFER_ST428',
         'func': check_pkg_config('zimg', '>= 3.0.5'),
+    }, {
+        'name': '--hos',
+        'desc': 'Horizon OS',
+        'func': check_statement(['switch.h'], ''),
     }
 ]
 
@@ -509,6 +513,11 @@ audio_output_features = [
         'desc': 'WASAPI audio output',
         'deps': 'os-win32 || os-cygwin',
         'func': check_cc(fragment=load_fragment('wasapi.c')),
+    }, {
+        'name': '--hos-audio',
+        'desc': 'Audren audio output',
+        'deps': 'hos',
+        'func': check_true,
     }
 ]
 
diff --git a/wscript_build.py b/wscript_build.py
index a470808ae5..3a82bc6ba8 100644
--- a/wscript_build.py
+++ b/wscript_build.py
@@ -240,7 +240,6 @@ def swift(task):
         ])
 
     getch2_c = ctx.pick_first_matching_dep([
-        ( "osdep/terminal-unix.c",               "posix" ),
         ( "osdep/terminal-win.c",                "win32-desktop" ),
         ( "osdep/terminal-dummy.c" ),
     ])
@@ -252,13 +251,11 @@ def swift(task):
     ])
 
     ipc_c = ctx.pick_first_matching_dep([
-        ( "input/ipc-unix.c",                    "posix" ),
         ( "input/ipc-win.c",                     "win32-desktop" ),
         ( "input/ipc-dummy.c" ),
     ])
 
     subprocess_c = ctx.pick_first_matching_dep([
-        ( "osdep/subprocess-posix.c",            "posix" ),
         ( "osdep/subprocess-win.c",              "win32-desktop" ),
         ( "osdep/subprocess-dummy.c" ),
     ])
@@ -309,6 +306,7 @@ def swift(task):
         ( "audio/out/ao_wasapi.c",               "wasapi" ),
         ( "audio/out/ao_wasapi_changenotify.c",  "wasapi" ),
         ( "audio/out/ao_wasapi_utils.c",         "wasapi" ),
+        ( "audio/out/ao_hos.c",                  "hos-audio" ),
         ( "audio/out/buffer.c" ),
 
         ## Core
