diff --git a/osdep/io.c b/osdep/io.c
index 8cd6dede85..a1933888dd 100644
--- a/osdep/io.c
+++ b/osdep/io.c
@@ -62,7 +62,7 @@ bool mp_set_cloexec(int fd)
     return true;
 }
 
-#ifdef __MINGW32__
+#if defined(__MINGW32__) || defined(__SWITCH__)
 int mp_make_cloexec_pipe(int pipes[2])
 {
     pipes[0] = pipes[1] = -1;
@@ -82,7 +82,7 @@ int mp_make_cloexec_pipe(int pipes[2])
 }
 #endif
 
-#ifdef __MINGW32__
+#if defined(__MINGW32__) || defined(__SWITCH__)
 int mp_make_wakeup_pipe(int pipes[2])
 {
     return mp_make_cloexec_pipe(pipes);
diff --git a/osdep/switch/sys/mman.h b/osdep/switch/sys/mman.h
new file mode 100644
index 0000000000..398ff01729
--- /dev/null
+++ b/osdep/switch/sys/mman.h
@@ -0,0 +1,15 @@
+#ifndef _MEMMAP_H_
+#define _MEMMAP_H_
+
+#include <stdio.h>
+#include <stdint.h>
+
+#define PROT_READ       0x1
+#define PROT_WRITE      0x2
+#define MAP_SHARED      0x01
+#define MAP_FAILED      ((void *) -1)
+
+#define mmap(a, b, c, d, e, f) malloc(b)
+#define munmap(a, b) free(a)
+
+#endif
diff --git a/sub/filter_regex.c b/sub/filter_regex.c
index 8e299918ce..c7b08f5273 100644
--- a/sub/filter_regex.c
+++ b/sub/filter_regex.c
@@ -1,5 +1,5 @@
-#include <regex.h>
 #include <sys/types.h>
+#include <regex.h>
 
 #include "common/common.h"
 #include "common/msg.h"
diff --git a/video/mp_image.c b/video/mp_image.c
index 40678d10bd..eaed5dd9c8 100644
--- a/video/mp_image.c
+++ b/video/mp_image.c
@@ -176,7 +176,7 @@ static bool mp_image_alloc_planes(struct mp_image *mpi)
         return false;
 
     // Note: mp_image_pool assumes this creates only 1 AVBufferRef.
-    mpi->bufs[0] = av_buffer_alloc(size + align);
+    mpi->bufs[0] = av_buffer_aligned_alloc(size + align, 0x100); // Aligmnent required for plane offsets
     if (!mpi->bufs[0])
         return false;
 
diff --git a/video/mp_image.h b/video/mp_image.h
index 98dd666412..376e269356 100644
--- a/video/mp_image.h
+++ b/video/mp_image.h
@@ -32,7 +32,7 @@
 // libraries except libavcodec don't really know what alignment they want.
 // Things will randomly crash or get slower if the alignment is not satisfied.
 // Whatever. This value should be pretty safe with current CPU architectures.
-#define MP_IMAGE_BYTE_ALIGN 64
+#define MP_IMAGE_BYTE_ALIGN 256 // VIC alignement
 
 #define MP_IMGFIELD_TOP_FIRST 0x02
 #define MP_IMGFIELD_REPEAT_FIRST 0x04
diff --git a/video/out/gpu/video.c b/video/out/gpu/video.c
index 4233f14336..8b3b55e82e 100644
--- a/video/out/gpu/video.c
+++ b/video/out/gpu/video.c
@@ -109,6 +109,7 @@ struct image {
     int w, h; // logical size (after transformation)
     struct gl_transform transform; // rendering transformation
     int padding; // number of leading padding components (e.g. 2 = rg is padding)
+    int interlaced;
 };
 
 // A named image, for user scripting purposes
@@ -437,6 +438,7 @@ const struct m_sub_options gl_video_conf = {
         {"linear-downscaling", OPT_BOOL(linear_downscaling)},
         {"linear-upscaling", OPT_BOOL(linear_upscaling)},
         {"sigmoid-upscaling", OPT_BOOL(sigmoid_upscaling)},
+        {"gpu-tx1-deint", OPT_CHOICE(deint_shader,{"0", 0}, {"1", 1}, {"2", -1})},
         {"sigmoid-center", OPT_FLOAT(sigmoid_center), M_RANGE(0.0, 1.0)},
         {"sigmoid-slope", OPT_FLOAT(sigmoid_slope), M_RANGE(1.0, 20.0)},
         {"fbo-format", OPT_STRING(fbo_format)},
@@ -842,6 +844,10 @@ static void pass_get_images(struct gl_video *p, struct video_image *vimg,
             .h = t->h,
             .padding = padding,
         };
+        if (p->opts.deint_shader == -1)
+            img[n].interlaced = !!(vimg->mpi->fields & MP_IMGFIELD_INTERLACED);
+        else if (p->opts.deint_shader == 1)
+            img[n].interlaced = 1;
 
         for (int i = 0; i < 4; i++)
             img[n].components += !!p->ra_format.components[n][i];
@@ -1373,8 +1379,16 @@ static void copy_image(struct gl_video *p, unsigned int *offset, struct image im
         img.multiplier *= 1.0 / (tex_max - 1);
     }
 
-    GLSLF("color.%s = %f * vec4(texture(texture%d, texcoord%d)).%s;\n",
-          dst, img.multiplier, id, id, src);
+    if (img.interlaced) {
+        GLSLF("float yprev%d = texcoord%d.y == 0.0 ? 0.0 : texcoord%d.y - 1.0 / texture_size%d.y;\n",
+              id, id, id, id);
+        GLSLF("vec2 prev%d = vec2(texcoord%d.x, yprev%d);\n", id, id, id);
+        GLSLF("color.%s = %f * mix(texture(texture%d, texcoord%d), texture(texture%d, prev%d), 0.5).%s;\n",
+              dst, img.multiplier, id, id, id, id, src);
+    } else {
+        GLSLF("color.%s = %f * vec4(texture(texture%d, texcoord%d)).%s;\n",
+              dst, img.multiplier, id, id, src);
+    }
 
     *offset += count;
 }
@@ -2171,7 +2185,7 @@ static void pass_read_video(struct gl_video *p)
     // If any textures are still in integer format by this point, we need
     // to introduce an explicit conversion pass to avoid breaking hooks/scaling
     for (int n = 0; n < 4; n++) {
-        if (img[n].tex && img[n].tex->params.format->ctype == RA_CTYPE_UINT) {
+        if (img[n].tex && img[n].tex->params.format->ctype == RA_CTYPE_UINT || img[n].interlaced) {
             GLSLF("// use_integer fix for plane %d\n", n);
             copy_image(p, &(int){0}, img[n]);
             pass_describe(p, "use_integer fix");
@@ -3869,6 +3883,7 @@ static void check_gl_features(struct gl_video *p)
             .early_flush = p->opts.early_flush,
             .icc_opts = p->opts.icc_opts,
             .hwdec_interop = p->opts.hwdec_interop,
+            .deint_shader = p->opts.deint_shader,
             .target_trc = p->opts.target_trc,
             .target_prim = p->opts.target_prim,
             .target_peak = p->opts.target_peak,
diff --git a/video/out/gpu/video.h b/video/out/gpu/video.h
index 30c100e302..8b6e8f71be 100644
--- a/video/out/gpu/video.h
+++ b/video/out/gpu/video.h
@@ -182,6 +182,7 @@ struct gl_video_opts {
     int early_flush;
     char *shader_cache_dir;
     char *hwdec_interop;
+    int deint_shader;
 };
 
 extern const struct m_sub_options gl_video_conf;
diff --git a/wscript_build.py b/wscript_build.py
index a470808ae5..ca510ada87 100644
--- a/wscript_build.py
+++ b/wscript_build.py
@@ -240,7 +240,6 @@ def build(ctx):
         ])
 
     getch2_c = ctx.pick_first_matching_dep([
-        ( "osdep/terminal-unix.c",               "posix" ),
         ( "osdep/terminal-win.c",                "win32-desktop" ),
         ( "osdep/terminal-dummy.c" ),
     ])
@@ -252,13 +251,11 @@ def build(ctx):
     ])
 
     ipc_c = ctx.pick_first_matching_dep([
-        ( "input/ipc-unix.c",                    "posix" ),
         ( "input/ipc-win.c",                     "win32-desktop" ),
         ( "input/ipc-dummy.c" ),
     ])
 
     subprocess_c = ctx.pick_first_matching_dep([
-        ( "osdep/subprocess-posix.c",            "posix" ),
         ( "osdep/subprocess-win.c",              "win32-desktop" ),
         ( "osdep/subprocess-dummy.c" ),
     ])
